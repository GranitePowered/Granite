classes {

  "net.minecraft.server.MinecraftServer" {
    name: net.minecraft.server.MinecraftServer
    methods {
      startServerThread: B
      tick: y
      func_152361_a: a(sn)
      isBlockProtected: a(aqu;dt;ahd)
      worldServerForDimension: a(int)
    }
    fields {
      commandManager: p
      fileBannedIPs: b
      fileBannedPlayers: a
      fileWhitelist: d
      logger: j
      configurationManager: v
      serverThread: aa
    }
  }

  "net.minecraft.entity.EntityLivingBase" {
    name: xm
    methods {
      killByVoidDamage: G
      canBreatheUnderwater: aX
      isChild: i_
      isAdult: aZ
      decreaseAirSupply: j(int)
      getExperiencePoints: b(ahd)
      isPlayer: ba
      getAITarget: bc
      getRevengeTimer: bd
      setRevengeTarget: b(xm)
      getLastAttacker: be
      getLastAttackerTime: bf
      setLastAttacker: p(wv)
      getAge: bg
      clearActivePotions: bj
      getActivePotionEffects: bk
      isPotionActive: k(int)
      //isPotionActive: a(wp)
      //getActivePotionEffect: b(wp)
      //addPotionEffect: c(wq)
      //isPotionApplicable: d(wq)
      isEntityUndead: bl
      removePotionEffect: m(int)
      heal: g(float)
      getHealth: bm
      setHealth: h(float)
      //attackEntityFrom: a(wh,float)
      knockBack: a(wv;float;double;double)
      getHurtSound: bn
      getDeathSound: bo
      isOnLadder: j_
      isEntityAlive: ai
      fall: e(float;float)
      getFallDamageSound: n(int)
      getTotalArmorValue: bq
      //applyArmorCalculations: b(wh;float)
      //applyPotionDamageCalculations:  c(wh;float)
      //damageEntity: d(wh;float)
      getMaxHealth: bt
      getArrowCountInEntity: bu
      setArrowCountInEntity: o(int)
      swingItem: bv
      kill: O
      getHeldItem: bz
      getEquipmentInSlot: p(int)
      //getCurrentArmor: q(int)
      setCurrentItemOrArmor: c(int;amj)
      setSprinting: d(boolean)
      getInventory: at
      dismountEntity: q(wv)
      jump: bE
      getAIMoveSpeed: bH
      setAIMoveSpeed: j(float)
      mountEntity: a(wv)
      setJumping: i(boolean)
      canEntityBeSeen: t(wv)
      getAbsorptionAmount: bM
      setAbsorptionAmount: l(float)
      //getTeam: bN
      //isOnSameTeam: c(xm)
      //isOnTeam: a(bsf)
    }
  }

  "net.minecraft.command.ServerCommandManager" {
    name: cl
  }

  "net.minecraft.entity.Entity" {
    name: wv
    methods {
      getEntityID: F
      setDead: J
      setSize: a(float;float)
      setFire: e(int)
      extinguish: N
      kill: O
      playSound: a(String;float;float)
      isImmuneToFire: K
      isWet: U
      isInWater: V
      getSplashSound: aa
      //isInsideOfMaterial: a(bof)
      setWorld: a(aqu)
      getDistanceToEntity: g(n.m.entity.Entity)
      getDistanceSqToEntity: h(n.m.entity.Entity)
      addVelocity: g(double;double;double)
      canBeCollidedWith: ad
      canBePushed: ae
      getEntityString: ag
      //entityDropItem: a(amj;float)
      isEntityAlive: ai
      isEntityInsideOpaqueBlock: aj
      mountEntity: a(n.m.entity.Entity)
      isEating: aq
      setEating: f(boolean)
      getInventory: at
      setCurrentItemOrArmor: c(int;n.m.item.ItemStack)
      isBurning: au
      isRiding: av
      isSneaking: aw
      setSneaking: c(boolean)
      isSprinting: ax
      setSprinting: d(boolean)
      isInvisible: ay
      setInvisible: e(boolean)
      //getFlag: g(int)
      //setFlag: b(int;boolean)
      getAir: aA
      setAir: h(int)
      //onStruckByLightning: a(ads)
      setInWeb: aB
      getCommandSenderName: d_
      getParts: aC
      isEntityEqual: k(n.m.entity.Entity)
      canAttackWithItem: aE
      getTeleportDirection: aG
      doesEntityNotTriggerPressurePlate: aH
      getUniqueID: aJ
      isPushedByWater: aK
      getWorld: e
      getDistanceToLocation: f(double;double;double)
      getDistanceSqToLocation: e(double;double;double)
      setPosition: a(double;double;double)
    }
    fields {
      posX: s
      posY: t
      posZ: u
      rotationPitch: z
      rotationYaw: y
      riddenByEntity: l
      ridingEntity: m
    }
  }

  "net.minecraft.entity.player.EntityPlayer" {
    name: ahd
    methods {
      clearItemInUse: bU
      getEquipmentInSlot: p
      getHeldItem: bz
      getName: d_
      stopUsingItem: bT
      addChatComponentMessage: b(ho)
    }

    fields {
      inventory: bg
    }
  }

  "net.minecraft.entity.EntityItem" {
    name: adw
    methods {
      searchForOtherItemsNearby: w
      setAgeToCreativeDespawnTime: j
      dealFireDamage: f(int)
      attackEntityFrom: a(wh;float)
      getName: d_
      getEntityItem: l
      setEntityItemStack: a(amj)
      getOwner: m
      setOwner: b(String)
      getThrower: n
      setThrower: c(String)
      setDefaultPickupDelay: p
      setNoPickupDelay: q
      setInfinitePickupDelay: r
      setPickupDelay: a(int)
      canPickUp: s
      //TODO: Set not despawnable?
      //TODO: Set not despawnable and not able to pickup?
    }
  }

  "net.minecraft.entity.item.EntityArmorStand" {
    name: adi
    methods {
      getHeldItem: bL
      getEquipmentInSlot: p(int)
      #getCurrentArmor: q(int)
      setCurrentItemOrArmor: c(int;amj)
      getInventory: at
      canBePushed: ae
      //attackEntityFrom: a(wh;float)
      playParticles: z
      dropBlock: A
      dropContents: C
      setInvisible: e(boolean)
      isChild: i_
      kill: G
      isInvisible: aV
      setSmall: a(boolean)
      isSmall: n
      setNoGravity: j(boolean)
      hasNoGravity: p
      setShowArms: k(boolean)
      getShowArms: q
      setNoBasePlate: l(boolean)
      hasNoBasePlate: r
      setHeadRotation: a(fa)
      setBodyRotation: b(fa)
      setLeftArmRotation: c(fa)
      setRightArmRotation: d(fa)
      setLeftLegRotation: e(fa)
      setRightLegRotation: f(fa)
    }

    fields {
      headRotation: bh
      bodyRotation: bi
      leftArmRotation: bj
      rightArmRotation: bk
      leftLegRotation: bl
      rightLegRotation: bm
    }
  }

  "net.minecraft.util.Rotations" {
    name: fa

    fields {
      x: a
      y: b
      z: c
    }
  }

  "net.minecraft.init.Bootstrap" {
    name: od
    methods {
      func_151354_b: c
    }
  }

  "net.minecraft.server.dedicated.DedicatedServer" {
    name: po
    methods {
      startServer: i
    }
  }

  "net.minecraft.server.ThreadServerShutdown" {
    name: pe
  }

  "net.minecraft.command.ICommandSender" {
    name: ae

    methods {
      getName: d_
    }
  }

  "net.minecraft.command.CommandHandler" {
    name: ab

    methods {
      executeCommand: a(ae;String)
    }
  }

  "net.minecraft.util.IChatComponent" {
    name: ho

    methods {
      appendText: a(String)
      appendSibling: a(n.m.util.IChatComponent)

      getUnformattedTextForChat: e
    }
  }

  "net.minecraft.util.ChatComponentText" {
    // Isn't this "hy"?
    name: hy

    fields {
      text: b
    }
  }

  "net.minecraft.server.management.ServerConfigurationManager" {
    name: sn

    methods {
      initializeConnectionToPlayer: a(gr;qw)
      playerLoggedOut: e(qw)
      func_148545_a: f(com.mojang.authlib.GameProfile)
    }

    fields {
      playerEntityList: e
    }
  }

  "net.minecraft.entity.player.EntityPlayerMP" {
    name: qw

    fields {
      playerNetServerHandler: a
    }
  }

  "net.minecraft.item.ItemStack" {
    name: amj

    methods {
      getDisplayName: q
      hasDisplayName: s
      setStackDisplayName: c(String)
      getItem: b
      getItemDamage: i
      setItemDamage: b(int)

      getTagCompound: o
      setTagCompound: d(n.m.nbt.NBTTagCompound)

      clearCustomName: r
    }

    fields {
      stackSize: b
    }
  }

  "net.minecraft.nbt.NBTTagCompound" {
    name: fn

    methods {
      setTag: a(String;n.m.nbt.NBTBase)
      getTagList: c(String;int)
      getCompoundTag: m(String)
      hasKey: b(String;int)
    }
  }

  "net.minecraft.nbt.NBTTagList" {
    name: fv

    methods {
      tagCount: c
      getStringTagAt: f(int)
      appendTag: a(net.minecraft.nbt.NBTBase)
    }
  }

  "net.minecraft.nbt.NBTBase" {
    name: gd
  }

  "net.minecraft.nbt.NBTTagString" {
    name: gc
  }

  "net.minecraft.network.NetworkManager" {
    name: gr
  }

  "net.minecraft.server.dedicated.DedicatedPlayerList" {
    name: pn
  }

  "net.minecraft.util.ChunkCoordinates" {
    // TODO: this is actually fd, but I don't know what the actual dt is, and it extends fd, so I'm gonna cheat here
    name: dt

    methods {
      getX: n
      getY: o
      getZ: p
    }
  }

  "net.minecraft.world.World" {
    name: aqu

    methods {
      getBlock: p(dt)
      setBlock: a(dt;bec)
      getWorldInfo: P
    }
  }

  "net.minecraft.network.NetHandlerPlayServer" {
    name: rj
    methods {
      func_147345_a: a(ml)
      func_147346_a: a(mx)

      onDisconnect: a(ho)

      sendPacket: a(id)
    }

    fields {
      playerEntity: b
    }
  }

  "net.minecraft.network.play.client.C07PacketPlayerDigging" {
    name: ml

    methods {
      getPosition: a
    }
  }

  "com.mojang.authlib.GameProfile" {
    name: com.mojang.authlib.GameProfile
  }

  "net.minecraft.server.management.ItemInWorldManager" {
    name: qx

    methods {
      tryHarvestBlock: b(net.minecraft.util.ChunkCoordinates)
      activateBlockOrUseItem: a(ahd;aqu;amj;dt;ej;float;float;float)
    }

    fields {
      thisPlayerMP: b
      theWorld: a
    }
  }

  "net.minecraft.block.Block" {
    name: atr

    methods {
      getIdFromBlock: a(n.m.block.Block)
      createStackedBlock: i(n.m.block.IBlockWithMetadata)

      // Our unofficial name, waiting for MCP
      isReplaceable: f(aqu;dt)

      // Our unofficial name, waiting for MCP
      getItemDropped: a(bec;java.util.Random;int)

      onBlockPlaced: a(aqu;dt;ej;float;float;float;int;xm)
    }

    fields {
      blockRegistry: c
      blockHardness: w
      blockResistance: x
      canBlockGrass: t
      lightOpacity: s
      slipperiness: K
      lightValue: u

      // See below
      blockWithMetadata: M

      blockMetadata: L

      unlocalizedName: N
    }
  }

  "net.minecraft.item.Item" {
    name: alq

    methods {
      getItemFromBlock: a(atr)
      getItemFromName: d(String)
      getIdFromItem: b(alq)
      getItemStackDisplayName: a(amj)

      getMetadata: a(int)
    }

    fields {
      maxStackSize: h
      maxDamage: c

      itemRegistry: e
    }
  }

  "net.minecraft.util.RegistryNamespaced" {
    name: ev

    methods {
      getNameForObject: c(Object)
    }
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.BlockWithMetadata" {
    name: beg

    methods {
      getValue: b(n.m.block.BlockMetadataValue)
      setValue: a(n.m.block.BlockMetadataValue;Comparable)
      getBlock: c
    }

    fields {
      values: b
    }
  }

  "net.minecraft.block.IBlockWithMetadata" {
    name: bec
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.BlockMetadata" {
    name: bed

    fields {
      options: d
      variants: e
    }
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.BlockMetadataValue" {
    name: bex

    methods {
      getValues: c
      getName: a
    }
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.BlockMetadataEnumValue" {
    name: bev

    fields {
      valuesMap: b
    }
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.BlockMetadataEnum" {
    name: va

    methods {
      // I really have no idea what this is
      // TODO
      getSomething: l
    }
  }


  "net.minecraft.network.play.client.C08PacketPlayerBlockPlacement" {
    name: mx
  }

  "net.minecraft.network.play.client.S23PacketBlockChange" {
    name: iw
  }

  "net.minecraft.network.Packet" {
    name: id
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.Direction": {
    name: ej
  }

  "net.minecraft.util.ChatComponentTranslation" {
    name: hz

    fields {
      formatArgs: e
      key: d
    }
  }

  "net.minecraft.world.storage.WorldInfo" {
    name: bqo

    fields {
        randomSeed: b
        generator: c
        generatorOptions: d
        spawnX: e
        spawnY: f
        spawnZ: g
        time: h
        dayTime: i
        playerData: l
        dimension: m
        name: n
        version: o
        gameType: u
        useMapFeatures: v
        sizeOnDisk: k
        clearWeatherTime: p
        rainTime: r
        raining: q
        thunderTime: t
        thundering: s
        hardcore: w
        allowCommands: x
        initialized: y
        borderCenterX: B
        borderCenterZ: C
        borderSize: D
        borderSizeLerpTime: E
        borderSafeZone: G
        borderDamagePerBlock: H
        borderSizeLerpTarget: F
        borderWarningBlocks: I
        borderWarningTime: J
        difficulty: z
        difficultyLocked: A
        gameRules: K
    }
    methods {
        getSeed: b
        getSpawnX: c
        getSpawnY: d
        getSpawnZ: e
        getTime: f
        getDayTime: g
        setSpawn: a(dt)
        setTime: b(long)
        setDayTime: c(long)
        getLevelName: k
        setLevelName: a(String)
        getVersion: l
        setVersion: e(int)
        isThundering: n
        setThundering: a(boolean)
        getThunderDuration: o
        setThunderDuration: f(int)
        isRaining: p
        setRaining: b(boolean)
        getRainDuration: q
        setRainDuration: g(int)
        getGameType: r
        getUseMapFeatures: s
        setUseMapFeatures: f(boolean)
        setGameType: a(arc)
        isHardcore: t
        setHardcore: g(boolean)
        getWorldGenerator: u
        setWorldGenerator: a(are)
        getGeneratorOptions: B
        getAllowCommands: v
        setAllowCommands: c(boolean)
        isInitialized: w
        setInitialized: d(boolean)
        getGameRules: x
        getBorderCenterX: C
        getBorderCenterZ: D
        getBorderSize: E
        setBorderSize: a(double)
        getBorderSizeLerpTime: F
        setBorderSizeLerpTime: e(long)
        getBorderSizeLerpTarget: G
        setBorderSizeLerpTarget: b(double)
        setBorderCenterZ: c(double)
        setBorderCenterX: d(double)
        getBorderSafeZone: H
        setBorderSafeZone: e(double)
        getBorderDamagePerBlock: I
        setBorderDamagePerBlock: f(double)
        getBorderWarningBlocks: J
        getBorderWarningTime: K
        setBorderWarningBlocks: j(int)
        setBorderWarningTime: k(int)
        getDifficulty: y
        setDifficulty: a(vt)
        getDifficultyLocked: z
        setDifficultyLocked: e(boolean)
    }
  }

  "net.minecraft.item.ItemBlock" {
    name: aju

    methods {
      getBlock: d
    }
  }

  "net.minecraft.command.PlayerSelector" {
    name: ah

    methods {
      matchPlayers: b(ae;String;Class)
    }
  }

  "net.minecraft.network.ThreadQuickExitException" {
    name: pi
  }

  "net.minecraft.inventory.IInventory" {
    name: vq

    methods {
      getStackInSlot: a(int)
      getSizeInventory: n_
      setInventorySlotContents: a(int;n.m.item.ItemStack)
    }
  }

  "net.minecraft.entity.player.InventoryPlayer" {
    name: ahb

    methods {
      getFirstEmptyStack: j
      getCurrentItem: h
      addItemStackToInventory: a(amj)
    }

    fields {
      player: d
      currentItem: c
    }
  }
}